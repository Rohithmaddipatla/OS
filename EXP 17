#include <stdio.h>
#define MAX 100

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX];
    
    // Initialize allocation array to -1 (unallocated)
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    
    // Allocate each process
    for (int i = 0; i < n; i++) {
        int worstIndex = -1;

        // Find the block with the largest size that fits the process
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIndex == -1 || blockSize[j] > blockSize[worstIndex]) {
                    worstIndex = j;
                }
            }
        }

        // If a suitable block is found, allocate it
        if (worstIndex != -1) {
            allocation[i] = worstIndex;
            blockSize[worstIndex] -= processSize[i];
        }
    }
    
    // Output allocation details
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int m, n;
    int blockSize[MAX], processSize[MAX];

    // Input memory blocks
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blockSize[i]);
    }

    // Input processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processSize[i]);
    }

    // Perform Worst Fit allocation
    worstFit(blockSize, m, processSize, n);

    return 0;
}
